version: 2.1
orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-back-end-"${CIRCLE_WORKFLOW_ID}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name udapeople-front-end-"${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 8d7a2579-08d6-4634-ab0f-9991b68afb95" --request  GET  https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS )); 
            then
             cd backend
             npm i
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm i oauth-sign --save
            npm run build
            cd dist
            ls

      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend-build
      - restore_cache:
          keys:
            - "frontend-build"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm i oauth-sign --save
            npm run build

      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build
      - restore_cache:
          keys:
            - "backend-build"

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: back-end test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-build"
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

workflows:
  default:
    jobs:
      - build-frontend:
      - build-backend:
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
